from flask import Flask, render_template, request, session, redirect, url_for, flash, jsonify
import pymysql
from functools import wraps
from werkzeug.security import generate_password_hash, check_password_hash
import os
from datetime import datetime
import time

app = Flask(__name__)
app.secret_key = 'findemy-v2-secret-key-2024'

# โฌ๏ธ โฌ๏ธ โฌ๏ธ ุฃุถู ูุฐุง ุงูููุฏ ูู ููุง โฌ๏ธ โฌ๏ธ โฌ๏ธ

def init_real_data():
    """ุฅุฏุฎุงู ุฌููุน ุงูุจูุงูุงุช ุงูุญููููุฉ ูู ูููุงุชู"""
    print("๐ ุฌุงุฑู ุชุญููู ุงูุจูุงูุงุช ุงูุญููููุฉ ุงููุงููุฉ...")
    
    conn = get_db_connection()
    if not conn:
        print("โ ูุง ูููู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช")
        return
    
    try:
        cursor = conn.cursor()
        
        # 1. ุฅูุดุงุก ุงูุฌุฏุงูู
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS resources (
                id INT AUTO_INCREMENT PRIMARY KEY,
                name VARCHAR(255) NOT NULL,
                type ENUM('ููุชุจุฉ', 'ูุณุชูุฏุน') NOT NULL,
                university VARCHAR(255),
                wilaya VARCHAR(100),
                url VARCHAR(500) NOT NULL,
                description TEXT,
                repository_link VARCHAR(500),
                repository_name VARCHAR(500),
                search_keywords TEXT,
                is_active BOOLEAN DEFAULT TRUE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS scientific_sources (
                id INT AUTO_INCREMENT PRIMARY KEY,
                name VARCHAR(255) NOT NULL,
                url VARCHAR(500) NOT NULL,
                type VARCHAR(100),
                description TEXT,
                access_type VARCHAR(100),
                is_active BOOLEAN DEFAULT TRUE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # 2. ุฌููุน ุจูุงูุงุช ุงูููุงุฑุฏ ุงูุญููููุฉ (58 ุฌุงูุนุฉ)
        all_resources = [
            # ุฃุฏุฑุงุฑ
            ('ุฌุงูุนุฉ ุฃุฏุฑุงุฑ', 'ููุชุจุฉ', 'ุฌุงูุนุฉ ุฃุญูุฏ ุฏุฑุงูุฉ - ุฃุฏุฑุงุฑ', 'ุฃุฏุฑุงุฑ', 
             'https://ww1.univ-adrar.edu.dz/wp-signup.php?new=biblio.univ-adrar.edu.dz',
             'ุงูููุชุจุฉ ุงููุฑูุฒูุฉ ูุฌุงูุนุฉ ุฃุฏุฑุงุฑ',
             'https://www.univ-adrar.edu.dz/depot-institutionnel/',
             'ุงููุณุชูุฏุน ุงููุคุณุณู ูุฌุงูุนุฉ ุฃุญูุฏ ุฏุฑุงูุฉ - ุฃุฏุฑุงุฑ',
             'ุฃุฏุฑุงุฑ, ุฌุงูุนุฉ ุฃุฏุฑุงุฑ, ููุชุจุฉ, ูุณุชูุฏุน'),

            # ุงูุดูู
            ('ุฌุงูุนุฉ ุญุณูุจุฉ ุจู ุจูุนูู - ุงูุดูู', 'ููุชุจุฉ', 'ุฌุงูุนุฉ ุญุณูุจุฉ ุจู ุจูุนูู', 'ุงูุดูู',
             'http://bu.univ-chlef.dz/',
             'ุงูููุชุจุฉ ุงูุฌุงูุนูุฉ ูุฌุงูุนุฉ ุงูุดูู',
             'http://dspace.univ-chlef.dz/',
             'ุงููุณุชูุฏุน ุงูุฑููู ูุฌุงูุนุฉ ุงูุดูู',
             'ุงูุดูู, ุฌุงูุนุฉ ุงูุดูู, ููุชุจุฉ'),

            # ุงูุฃุบูุงุท
            ('ุฌุงูุนุฉ ุนูุงุฑ ุซููุฌู', 'ููุชุจุฉ', 'ุฌุงูุนุฉ ุนูุงุฑ ุซููุฌู', 'ุงูุฃุบูุงุท',
             'http://lagh-univ.dz/author/biblio/',
             'ุงูููุชุจุฉ ุงูุฌุงูุนูุฉ ูุฌุงูุนุฉ ุงูุฃุบูุงุท',
             'http://dspace.lagh-univ.dz/',
             'ุงููุณุชูุฏุน ุงูุฑููู ูุฌุงูุนุฉ ุงูุฃุบูุงุท',
             'ุงูุฃุบูุงุท, ุฌุงูุนุฉ ุงูุฃุบูุงุท, ููุชุจุฉ'),

            # ุฃู ุงูุจูุงูู
            ('ุฌุงูุนุฉ ุงูุนุฑุจู ุจู ูููุฏู - ุฃู ุงูุจูุงูู', 'ููุชุจุฉ', 'ุฌุงูุนุฉ ุงูุนุฑุจู ุจู ูููุฏู', 'ุฃู ุงูุจูุงูู',
             'https://www.univ-oeb.dz/Bibliotheque/',
             'ุงูููุชุจุฉ ุงููุฑูุฒูุฉ ูุฌุงูุนุฉ ุฃู ุงูุจูุงูู',
             'http://dspace.univ-oeb.dz:4000/home',
             'ุงููุณุชูุฏุน ุงูุฑููู ูุฌุงูุนุฉ ุงูุนุฑุจู ุจู ูููุฏู ุฃู ุงูุจูุงูู',
             'ุฃู ุงูุจูุงูู, ุฌุงูุนุฉ ุฃู ุงูุจูุงูู, ููุชุจุฉ'),

            # ุจุงุชูุฉ
            ('ุฌุงูุนุฉ ุจุงุชูุฉ 1', 'ููุชุจุฉ', 'ุฌุงูุนุฉ ุจุงุชูุฉ 1', 'ุจุงุชูุฉ',
             'https://bibliotheque.univ-batna.dz/',
             'ุงูููุชุจุฉ ุงููุฑูุฒูุฉ ูุฌุงูุนุฉ ุจุงุชูุฉ 1',
             'https://dspace.univ-batna.dz',
             'ุงููุณุชูุฏุน ุงูุฑููู ูุฌุงูุนุฉ ูุญูุฏ ุฎูุถุฑ ุจุงุชูุฉ 1',
             'ุจุงุชูุฉ, ุฌุงูุนุฉ ุจุงุชูุฉ, ููุชุจุฉ'),
            
            ('ุฌุงูุนุฉ ุจุงุชูุฉ 2', 'ููุชุจุฉ', 'ุฌุงูุนุฉ ุจุงุชูุฉ 2', 'ุจุงุชูุฉ',
             'https://bibliotheque.univ-batna2.dz/',
             'ุงูููุชุจุฉ ุงููุฑูุฒูุฉ ูุฌุงูุนุฉ ุจุงุชูุฉ 2',
             'https://dspace.univ-batna2.dz/',
             'ูุณุชูุฏุน ุงูุฑุณุงุฆู ุนูู ุงูุฎุท ูุฌุงูุนุฉ ุจุงุชูุฉ 2',
             'ุจุงุชูุฉ, ุฌุงูุนุฉ ุจุงุชูุฉ, ููุชุจุฉ'),

            # ุจุฌุงูุฉ
            ('ุฌุงูุนุฉ ุจุฌุงูุฉ', 'ููุชุจุฉ', 'ุฌุงูุนุฉ ุจุฌุงูุฉ', 'ุจุฌุงูุฉ',
             'https://biblio.univ-bejaia.dz/',
             'ุงูููุชุจุฉ ุงููุฑูุฒูุฉ ูุฌุงูุนุฉ ุจุฌุงูุฉ',
             'http://www.univ-bejaia.dz/dspace',
             'ูุณุชูุฏุน ุฌุงูุนุฉ ุนุจุฏ ุงูุฑุญูู ููุฑุฉ ุจุฌุงูุฉ',
             'ุจุฌุงูุฉ, ุฌุงูุนุฉ ุจุฌุงูุฉ, ููุชุจุฉ'),

            # ุจุณูุฑุฉ
            ('ุฌุงูุนุฉ ูุญูุฏ ุฎูุถุฑ', 'ููุชุจุฉ', 'ุฌุงูุนุฉ ูุญูุฏ ุฎูุถุฑ', 'ุจุณูุฑุฉ',
             'https://fll.univ-biskra.dz/index.php/ar/%D8%A7%D9%84%D9%85%D9%83%D8%AA%D8%A8%D8%A9',
             'ุงูููุชุจุฉ ุงููุฑูุฒูุฉ ูุฌุงูุนุฉ ุจุณูุฑุฉ',
             'http://archives.univ-biskra.dz/',
             'ุงููุณุชูุฏุน ุงููุคุณุณุงุชู ูุฌุงูุนุฉ ูุญูุฏ ุฎูุถุฑ ุจุณูุฑุฉ',
             'ุจุณูุฑุฉ, ุฌุงูุนุฉ ุจุณูุฑุฉ, ููุชุจุฉ'),

            # ุงูุจููุฏุฉ
            ('ุฌุงูุนุฉ ุงูุจููุฏุฉ 1', 'ููุชุจุฉ', 'ุฌุงูุนุฉ ุงูุจููุฏุฉ 1', 'ุงูุจููุฏุฉ',
             'https://ar.univ-blida.dz/bibliotheque-centrale-blida1/',
             'ุงูููุชุจุฉ ุงููุฑูุฒูุฉ ูุฌุงูุนุฉ ุงูุจููุฏุฉ 1',
             '',
             'ุบูุฑ ูุชููุฑ',
             'ุงูุจููุฏุฉ, ุฌุงูุนุฉ ุงูุจููุฏุฉ, ููุชุจุฉ'),
            
            ('ุฌุงูุนุฉ ุงูุจููุฏุฉ 2', 'ููุชุจุฉ', 'ุฌุงูุนุฉ ุงูุจููุฏุฉ 2', 'ุงูุจููุฏุฉ',
             'http://bibcentral.blogspot.com/',
             'ุงูููุชุจุฉ ุงููุฑูุฒูุฉ ูุฌุงูุนุฉ ุงูุจููุฏุฉ 2',
             'https://publications.univ-blida2.dz/',
             'ุงููุณุชูุฏุน ุงูุฑููู ูุฌุงูุนุฉ ุงูุจููุฏุฉ 2',
             'ุงูุจููุฏุฉ, ุฌุงูุนุฉ ุงูุจููุฏุฉ, ููุชุจุฉ'),

            # ุงูุจููุฑุฉ
            ('ุฌุงูุนุฉ ุงูุจููุฑุฉ', 'ููุชุจุฉ', 'ุฌุงูุนุฉ ุงูุจููุฑุฉ', 'ุงูุจููุฑุฉ',
             'https://www.univ-bouira.dz/bu/',
             'ุงูููุชุจุฉ ุงููุฑูุฒูุฉ ูุฌุงูุนุฉ ุงูุจููุฑุฉ',
             'https://www.univ-bouira.dz/fll/?p=4561',
             'ูุณุชูุฏุน ุฌุงูุนุฉ ุงูุจููุฑุฉ',
             'ุงูุจููุฑุฉ, ุฌุงูุนุฉ ุงูุจููุฑุฉ, ููุชุจุฉ'),

            # ุชููุฑุงุณุช
            ('ุฌุงูุนุฉ ุชููุฑุงุณุช', 'ููุชุจุฉ', 'ุฌุงูุนุฉ ุชููุฑุงุณุช', 'ุชููุฑุงุณุช',
             'https://bu.univ-tam.dz/',
             'ุงูููุชุจุฉ ุงููุฑูุฒูุฉ ูุฌุงูุนุฉ ุชููุฑุงุณุช',
             'https://dspace.univ-tam.dz/home',
             'ุงููุณุชูุฏุน ุงูุฑููู ูุฌุงูุนุฉ ุชููุฑุงุณุช',
             'ุชููุฑุงุณุช, ุฌุงูุนุฉ ุชููุฑุงุณุช, ููุชุจุฉ'),

            # ุชุจุณุฉ
            ('ุฌุงูุนุฉ ุชุจุณุฉ', 'ููุชุจุฉ', 'ุฌุงูุนุฉ ุชุจุณุฉ', 'ุชุจุณุฉ',
             'https://www.univ-tebessa.dz/bibliotheque/',
             'ุงูููุชุจุฉ ุงููุฑูุฒูุฉ ูุฌุงูุนุฉ ุชุจุณุฉ',
             'http://dspace.univ-tebessa.dz:8080/jspui',
             'ุงููุณุชูุฏุน ุงูุฑููู ูุฌุงูุนุฉ ุงูุนุฑุจู ุงูุชุจุณู',
             'ุชุจุณุฉ, ุฌุงูุนุฉ ุชุจุณุฉ, ููุชุจุฉ'),

            # ุชููุณุงู
            ('ุฌุงูุนุฉ ุชููุณุงู', 'ููุชุจุฉ', 'ุฌุงูุนุฉ ุชููุณุงู', 'ุชููุณุงู',
             'https://www.univ-tlemcen.dz/pages/74/%D8%A7%D9%84%D9%85%D9%83%D8%AA%D8%A8%D8%A9-%D8%A7%D9%84%D9%85%D8%B1%D9%83%D8%B2%D9%8A%D8%A9',
             'ุงูููุชุจุฉ ุงููุฑูุฒูุฉ ูุฌุงูุนุฉ ุชููุณุงู',
             'http://dspace.univ-tlemcen.dz',
             'ุงููุณุชูุฏุน ุงููุคุณุณุงุชู ูุฌุงูุนุฉ ุฃุจู ุจูุฑ ุจููุงูุฏ ุชููุณุงู',
             'ุชููุณุงู, ุฌุงูุนุฉ ุชููุณุงู, ููุชุจุฉ'),

            # ุชูุงุฑุช
            ('ุฌุงูุนุฉ ุชูุงุฑุช', 'ููุชุจุฉ', 'ุฌุงูุนุฉ ุชูุงุฑุช', 'ุชูุงุฑุช',
             'https://www.univ-tiaret.dz/ar/bibliothequeCentrale.html',
             'ุงูููุชุจุฉ ุงููุฑูุฒูุฉ ูุฌุงูุนุฉ ุชูุงุฑุช',
             '',
             'ุบูุฑ ูุชููุฑ',
             'ุชูุงุฑุช, ุฌุงูุนุฉ ุชูุงุฑุช, ููุชุจุฉ'),

            # ุชูุฒู ูุฒู
            ('ุฌุงูุนุฉ ุชูุฒู ูุฒู', 'ููุชุจุฉ', 'ุฌุงูุนุฉ ุชูุฒู ูุฒู', 'ุชูุฒู ูุฒู',
             'https://www.ummto.dz/category/bibliotheque/',
             'ุงูููุชุจุฉ ุงููุฑูุฒูุฉ ูุฌุงูุนุฉ ุชูุฒู ูุฒู',
             'https://www.ummto.dz/dspace',
             'ุงููุณุชูุฏุน ุงูุฑููู ูุฌุงูุนุฉ ููููุฏ ูุนูุฑู ุชูุฒู ูุฒู',
             'ุชูุฒู ูุฒู, ุฌุงูุนุฉ ุชูุฒู ูุฒู, ููุชุจุฉ'),

            # ุงูุฌุฒุงุฆุฑ
            ('ุฌุงูุนุฉ ุงูุฌุฒุงุฆุฑ 1', 'ููุชุจุฉ', 'ุฌุงูุนุฉ ุงูุฌุฒุงุฆุฑ 1', 'ุงูุฌุฒุงุฆุฑ',
             'http://bu.univ-alger.dz/',
             'ุงูููุชุจุฉ ุงููุฑูุฒูุฉ ูุฌุงูุนุฉ ุงูุฌุฒุงุฆุฑ 1',
             'http://biblio.univ-alger.dz/jspui',
             'ุงูููุชุจุฉ ุงูุฑูููุฉ ูุฌุงูุนุฉ ุจู ููุณู ุจู ุฎุฏุฉ ุงูุฌุฒุงุฆุฑ 1',
             'ุงูุฌุฒุงุฆุฑ, ุฌุงูุนุฉ ุงูุฌุฒุงุฆุฑ, ููุชุจุฉ'),
            
            ('ุฌุงูุนุฉ ุงูุฌุฒุงุฆุฑ 2', 'ููุชุจุฉ', 'ุฌุงูุนุฉ ุงูุฌุฒุงุฆุฑ 2', 'ุงูุฌุฒุงุฆุฑ',
             'http://bibliotheque.univ-alger2.dz/',
             'ุงูููุชุจุฉ ุงููุฑูุฒูุฉ ูุฌุงูุนุฉ ุงูุฌุฒุงุฆุฑ 2',
             'http://www.ddeposit.univ-alger2.dz:8080/xmlui',
             'ุงููุณุชูุฏุน ุงูุฑููู ูุฌุงูุนุฉ ุฃุจู ุงููุงุณู ุณุนุฏ ุงููู ุงูุฌุฒุงุฆุฑ 2',
             'ุงูุฌุฒุงุฆุฑ, ุฌุงูุนุฉ ุงูุฌุฒุงุฆุฑ, ููุชุจุฉ'),
            
            ('ุฌุงูุนุฉ ุงูุฌุฒุงุฆุฑ 3', 'ููุชุจุฉ', 'ุฌุงูุนุฉ ุงูุฌุฒุงุฆุฑ 3', 'ุงูุฌุฒุงุฆุฑ',
             'https://bib.univ-alger3.dz/',
             'ุงูููุชุจุฉ ุงููุฑูุฒูุฉ ูุฌุงูุนุฉ ุงูุฌุฒุงุฆุฑ 3',
             'https://dspace.univ-alger3.dz/jspui/',
             'ุงููุณุชูุฏุน ุงูุฑููู ูุฌุงูุนุฉ ุงูุฌุฒุงุฆุฑ 3',
             'ุงูุฌุฒุงุฆุฑ, ุฌุงูุนุฉ ุงูุฌุฒุงุฆุฑ, ููุชุจุฉ'),
            
            ('ุฌุงูุนุฉ ุงูุนููู ูุงูุชูููููุฌูุง', 'ููุชุจุฉ', 'ุฌุงูุนุฉ ุงูุนููู ูุงูุชูููููุฌูุง', 'ุงูุฌุฒุงุฆุฑ',
             'https://bu.usthb.dz/',
             'ุงูููุชุจุฉ ุงููุฑูุฒูุฉ ูุฌุงูุนุฉ ุงูุนููู ูุงูุชูููููุฌูุง',
             'https://repository.usthb.dz',
             'ุงููุณุชูุฏุน ุงููุคุณุณุงุชู ูุฌุงูุนุฉ ุงูุนููู ูุงูุชูููููุฌูุง ููุงุฑู ุจููุฏูู',
             'ุงูุฌุฒุงุฆุฑ, ุฌุงูุนุฉ ุงูุนููู ูุงูุชูููููุฌูุง, ููุชุจุฉ'),

            # ุงูุฌููุฉ
            ('ุฌุงูุนุฉ ุงูุฌููุฉ', 'ููุชุจุฉ', 'ุฌุงูุนุฉ ุงูุฌููุฉ', 'ุงูุฌููุฉ',
             'https://www.univ-djelfa.dz/ar/?page_id=80',
             'ุงูููุชุจุฉ ุงููุฑูุฒูุฉ ูุฌุงูุนุฉ ุงูุฌููุฉ',
             'http://dspace.univ-djelfa.dz:8080/xmlui',
             'ุงููุณุชูุฏุน ุงูุฑููู ูุฌุงูุนุฉ ุฒูุงู ุนุงุดูุฑ ุงูุฌููุฉ',
             'ุงูุฌููุฉ, ุฌุงูุนุฉ ุงูุฌููุฉ, ููุชุจุฉ'),

            # ุฌูุฌู
            ('ุฌุงูุนุฉ ุฌูุฌู', 'ููุชุจุฉ', 'ุฌุงูุนุฉ ุฌูุฌู', 'ุฌูุฌู',
             'https://fsecsg.univ-jijel.dz/index.php/accueil/bibliotheque-de-la-faculte',
             'ุงูููุชุจุฉ ุงููุฑูุฒูุฉ ูุฌุงูุนุฉ ุฌูุฌู',
             'http://dspace.univ-jijel.dz:8080/xmlui',
             'ุงููุณุชูุฏุน ุงููุคุณุณุงุชู ูุฌุงูุนุฉ ุฌูุฌู',
             'ุฌูุฌู, ุฌุงูุนุฉ ุฌูุฌู, ููุชุจุฉ'),

            # ุณุทูู
            ('ุฌุงูุนุฉ ุณุทูู 1', 'ููุชุจุฉ', 'ุฌุงูุนุฉ ุณุทูู 1', 'ุณุทูู',
             'https://catalogue-biblio.univ-setif.dz/opac/',
             'ุงูููุชุจุฉ ุงููุฑูุฒูุฉ ูุฌุงูุนุฉ ุณุทูู 1',
             'http://dspace.univ-setif.dz:8888/jspui',
             'ุงููุณุชูุฏุน ุงูุฑููู ูุฌุงูุนุฉ ูุฑุญุงุช ุนุจุงุณ ุณุทูู 1',
             'ุณุทูู, ุฌุงูุนุฉ ุณุทูู, ููุชุจุฉ'),
            
            ('ุฌุงูุนุฉ ุณุทูู 2', 'ููุชุจุฉ', 'ุฌุงูุนุฉ ุณุทูู 2', 'ุณุทูู',
             'https://bc.univ-setif2.dz/index.php/ar/',
             'ุงูููุชุจุฉ ุงููุฑูุฒูุฉ ูุฌุงูุนุฉ ุณุทูู 2',
             'http://dspace.univ-setif2.dz/xmlui',
             'ุงููุณุชูุฏุน ุงููุคุณุณุงุชู ูุฌุงูุนุฉ ูุญูุฏ ูููู ุฏุจุงุบูู ุณุทูู 2',
             'ุณุทูู, ุฌุงูุนุฉ ุณุทูู, ููุชุจุฉ'),

            # ุณุนูุฏุฉ
            ('ุฌุงูุนุฉ ุณุนูุฏุฉ', 'ููุชุจุฉ', 'ุฌุงูุนุฉ ุณุนูุฏุฉ', 'ุณุนูุฏุฉ',
             'https://www.univ-saida.dz/%D8%A7%D9%84%D9%85%D9%83%D8%AA%D8%A8%D8%A9-%D8%A7%D9%84%D9%85%D8%B1%D9%83%D8%B2%D9%8A%D8%A9/',
             'ุงูููุชุจุฉ ุงููุฑูุฒูุฉ ูุฌุงูุนุฉ ุณุนูุฏุฉ',
             '',
             'ุบูุฑ ูุชููุฑ',
             'ุณุนูุฏุฉ, ุฌุงูุนุฉ ุณุนูุฏุฉ, ููุชุจุฉ'),

            # ุณูููุฏุฉ
            ('ุฌุงูุนุฉ ุณูููุฏุฉ', 'ููุชุจุฉ', 'ุฌุงูุนุฉ ุณูููุฏุฉ', 'ุณูููุฏุฉ',
             'https://bibliotheque.univ-skikda.dz/index.php/ar/',
             'ุงูููุชุจุฉ ุงููุฑูุฒูุฉ ูุฌุงูุนุฉ ุณูููุฏุฉ',
             'http://dspace.univ-skikda.dz:4000/',
             'ุงููุณุชูุฏุน ุงูุฑููู ูุฌุงูุนุฉ ุณูููุฏุฉ',
             'ุณูููุฏุฉ, ุฌุงูุนุฉ ุณูููุฏุฉ, ููุชุจุฉ'),

            # ุณูุฏู ุจูุนุจุงุณ
            ('ุฌุงูุนุฉ ุณูุฏู ุจูุนุจุงุณ', 'ููุชุจุฉ', 'ุฌุงูุนุฉ ุณูุฏู ุจูุนุจุงุณ', 'ุณูุฏู ุจูุนุจุงุณ',
             'https://www.univ-sba.dz/%D8%A7%D9%84%D9%85%D9%83%D8%AA%D8%A8%D8%A9-%D8%A7%D9%84%D8%AC%D8%A7%D9%85%D8%B9%D9%8A%D8%A9/',
             'ุงูููุชุจุฉ ุงููุฑูุฒูุฉ ูุฌุงูุนุฉ ุณูุฏู ุจูุนุจุงุณ',
             'https://dspace.univ-sba.dz/',
             'ุงููุณุชูุฏุน ุงูุฑููู ูุฌุงูุนุฉ ุฌููุงูู ุงููุงุจุณุ ุณูุฏู ุจูุนุจุงุณ',
             'ุณูุฏู ุจูุนุจุงุณ, ุฌุงูุนุฉ ุณูุฏู ุจูุนุจุงุณ, ููุชุจุฉ'),

            # ูุงููุฉ
            ('ุฌุงูุนุฉ ูุงููุฉ', 'ููุชุจุฉ', 'ุฌุงูุนุฉ ูุงููุฉ', 'ูุงููุฉ',
             'https://www.univ-guelma.dz/fr/bibliotheque',
             'ุงูููุชุจุฉ ุงููุฑูุฒูุฉ ูุฌุงูุนุฉ ูุงููุฉ',
             'https://dspace.univ-guelma.dz/jspui',
             'ุงููุณุชูุฏุน ุงูุฑููู ูุฌุงูุนุฉ ูุงููุฉ',
             'ูุงููุฉ, ุฌุงูุนุฉ ูุงููุฉ, ููุชุจุฉ'),

            # ูุณูุทููุฉ
            ('ุฌุงูุนุฉ ูุณูุทููุฉ 1', 'ููุชุจุฉ', 'ุฌุงูุนุฉ ูุณูุทููุฉ 1', 'ูุณูุทููุฉ',
             'https://bu.umc.edu.dz/',
             'ุงูููุชุจุฉ ุงููุฑูุฒูุฉ ูุฌุงูุนุฉ ูุณูุทููุฉ 1',
             'http://archives.umc.edu.dz',
             'ุงููุณุชูุฏุน ุงููุคุณุณุงุชู ูุฌุงูุนุฉ ุงูุฅุฎูุฉ ููุชูุฑู ูุณูุทููุฉ 1',
             'ูุณูุทููุฉ, ุฌุงูุนุฉ ูุณูุทููุฉ, ููุชุจุฉ'),
            
            ('ุฌุงูุนุฉ ูุณูุทููุฉ 2', 'ููุชุจุฉ', 'ุฌุงูุนุฉ ูุณูุทููุฉ 2', 'ูุณูุทููุฉ',
             'https://www.univ-constantine2.dz/opac/',
             'ุงูููุชุจุฉ ุงููุฑูุฒูุฉ ูุฌุงูุนุฉ ูุณูุทููุฉ 2',
             '',
             'ุบูุฑ ูุชููุฑ',
             'ูุณูุทููุฉ, ุฌุงูุนุฉ ูุณูุทููุฉ, ููุชุจุฉ'),
            
            ('ุฌุงูุนุฉ ูุณูุทููุฉ 3', 'ููุชุจุฉ', 'ุฌุงูุนุฉ ูุณูุทููุฉ 3', 'ูุณูุทููุฉ',
             'https://univ-constantine3.dz/ar/category/%D8%A7%D9%84%D9%85%D9%83%D8%AA%D8%A8%D8%A9-%D8%A7%D9%84%D9%85%D8%B1%D9%83%D8%B2%D9%8A%D8%A9/',
             'ุงูููุชุจุฉ ุงููุฑูุฒูุฉ ูุฌุงูุนุฉ ูุณูุทููุฉ 3',
             '',
             'ุบูุฑ ูุชููุฑ',
             'ูุณูุทููุฉ, ุฌุงูุนุฉ ูุณูุทููุฉ, ููุชุจุฉ'),

            # ุงููุณููุฉ
            ('ุฌุงูุนุฉ ุงููุณููุฉ', 'ููุชุจุฉ', 'ุฌุงูุนุฉ ุงููุณููุฉ', 'ุงููุณููุฉ',
             '',
             'ุงูููุชุจุฉ ุงููุฑูุฒูุฉ ูุฌุงูุนุฉ ุงููุณููุฉ',
             'http://dspace.univ-msila.dz:8080/xmlui',
             'ุงููุณุชูุฏุน ุงููุคุณุณุงุชู ูุฌุงูุนุฉ ูุญูุฏ ุจูุถูุงู ุงููุณููุฉ',
             'ุงููุณููุฉ, ุฌุงูุนุฉ ุงููุณููุฉ, ููุชุจุฉ'),

            # ูุนุณูุฑ
            ('ุฌุงูุนุฉ ูุนุณูุฑ', 'ููุชุจุฉ', 'ุฌุงูุนุฉ ูุนุณูุฑ', 'ูุนุณูุฑ',
             '',
             'ุงูููุชุจุฉ ุงููุฑูุฒูุฉ ูุฌุงูุนุฉ ูุนุณูุฑ',
             'http://dspace.univ-mascara.dz:8080/jspui',
             'ุงูููุชุจุฉ ุงูุฑูููุฉ ููุจุญูุซ ูุฌุงูุนุฉ ูุตุทูู ุฅุณุทูุจููู ูุนุณูุฑ',
             'ูุนุณูุฑ, ุฌุงูุนุฉ ูุนุณูุฑ, ููุชุจุฉ'),

            # ูุฑููุฉ
            ('ุฌุงูุนุฉ ูุฑููุฉ', 'ููุชุจุฉ', 'ุฌุงูุนุฉ ูุฑููุฉ', 'ูุฑููุฉ',
             '',
             'ุงูููุชุจุฉ ุงููุฑูุฒูุฉ ูุฌุงูุนุฉ ูุฑููุฉ',
             'https://dspace.univ-ouargla.dz/jspui',
             'ุงููุณุชูุฏุน ุงูุฑููู ูุฌุงูุนุฉ ูุงุตุฏู ูุฑุจุงุญ ูุฑููุฉ',
             'ูุฑููุฉ, ุฌุงูุนุฉ ูุฑููุฉ, ููุชุจุฉ'),

            # ููุฑุงู
            ('ุฌุงูุนุฉ ููุฑุงู 2', 'ููุชุจุฉ', 'ุฌุงูุนุฉ ููุฑุงู 2', 'ููุฑุงู',
             '',
             'ุงูููุชุจุฉ ุงููุฑูุฒูุฉ ูุฌุงูุนุฉ ููุฑุงู 2',
             'https://ds.univ-oran2.dz:844',
             'ุงููุณุชูุฏุน ุงูุฑููู ูุฌุงูุนุฉ ูุญูุฏ ุจู ุจูุฉ ููุฑุงู 2',
             'ููุฑุงู, ุฌุงูุนุฉ ููุฑุงู, ููุชุจุฉ'),
            
            ('ุฌุงูุนุฉ ููุฑุงู ููุนููู ูุงูุชูููููุฌูุง', 'ููุชุจุฉ', 'ุฌุงูุนุฉ ููุฑุงู ููุนููู ูุงูุชูููููุฌูุง', 'ููุฑุงู',
             '',
             'ุงูููุชุจุฉ ุงููุฑูุฒูุฉ ูุฌุงูุนุฉ ููุฑุงู ููุนููู ูุงูุชูููููุฌูุง',
             'http://dspace.univ-usto.dz',
             'ุงููุณุชูุฏุน ุงููุคุณุณุงุชู ูุฌุงูุนุฉ ููุฑุงู ููุนููู ูุงูุชูููููุฌูุง ูุญูุฏ ุจูุถูุงู',
             'ููุฑุงู, ุฌุงูุนุฉ ููุฑุงู, ููุชุจุฉ'),

            # ุจููุฑุฏุงุณ
            ('ุฌุงูุนุฉ ุจููุฑุฏุงุณ', 'ููุชุจุฉ', 'ุฌุงูุนุฉ ุจููุฑุฏุงุณ', 'ุจููุฑุฏุงุณ',
             'https://bu.univ-boumerdes.dz/?lang=ar',
             'ุงูููุชุจุฉ ุงููุฑูุฒูุฉ ูุฌุงูุนุฉ ุจููุฑุฏุงุณ',
             'https://bu.univ-boumerdes.dz/umbb-institutional-repository/?lang=ar',
             'ุงููุณุชูุฏุน ุงููุคุณุณุงุชู ูุฌุงูุนุฉ ูุญูุฏ ุจููุฑุฉ ุจููุฑุฏุงุณ',
             'ุจููุฑุฏุงุณ, ุฌุงูุนุฉ ุจููุฑุฏุงุณ, ููุชุจุฉ'),

            # ุงููุงุฏู
            ('ุฌุงูุนุฉ ุงููุงุฏู', 'ููุชุจุฉ', 'ุฌุงูุนุฉ ุงููุงุฏู', 'ุงููุงุฏู',
             '',
             'ุงูููุชุจุฉ ุงููุฑูุฒูุฉ ูุฌุงูุนุฉ ุงููุงุฏู',
             'http://dspace.univ-eloued.dz',
             'ุงููุณุชูุฏุน ุงูุฑููู ูุฌุงูุนุฉ ุงููุงุฏู',
             'ุงููุงุฏู, ุฌุงูุนุฉ ุงููุงุฏู, ููุชุจุฉ'),

            # ุบุฑุฏุงูุฉ
            ('ุฌุงูุนุฉ ุบุฑุฏุงูุฉ', 'ููุชุจุฉ', 'ุฌุงูุนุฉ ุบุฑุฏุงูุฉ', 'ุบุฑุฏุงูุฉ',
             '',
             'ุงูููุชุจุฉ ุงููุฑูุฒูุฉ ูุฌุงูุนุฉ ุบุฑุฏุงูุฉ',
             'http://dspace.univ-ghardaia.dz:8080/jspui',
             'ูุณุชูุฏุน ุฌุงูุนุฉ ุบุฑุฏุงูุฉ',
             'ุบุฑุฏุงูุฉ, ุฌุงูุนุฉ ุบุฑุฏุงูุฉ, ููุชุจุฉ'),

            # ุณูู ุฃูุฑุงุณ
            ('ุฌุงูุนุฉ ุณูู ุฃูุฑุงุณ', 'ููุชุจุฉ', 'ุฌุงูุนุฉ ุณูู ุฃูุฑุงุณ', 'ุณูู ุฃูุฑุงุณ',
             '',
             'ุงูููุชุจุฉ ุงููุฑูุฒูุฉ ูุฌุงูุนุฉ ุณูู ุฃูุฑุงุณ',
             'https://www.univ-soukahras.dz/fr/publication',
             'ูุฑูุฒ ุงูุจุญูุซ ุงูุฃูุงุฏูููุฉ ูุฌุงูุนุฉ ุณูู ุฃูุฑุงุณ',
             'ุณูู ุฃูุฑุงุณ, ุฌุงูุนุฉ ุณูู ุฃูุฑุงุณ, ููุชุจุฉ')
        ]

        # 3. ุฌููุน ุจูุงูุงุช ุงููุตุงุฏุฑ ุงูุนูููุฉ ุงูุญููููุฉ
        all_sources = [
            ('PubMed', 'https://pubmed.ncbi.nlm.nih.gov/', 'ููุชูุญุฉ', 
             'ูุงุนุฏุฉ ุจูุงูุงุช ุทุจูุฉ ุชุญุชูู ุนูู ููุงููู ุงูููุงูุงุช ูู ุงูุทุจ ูุงูุนููู ุงูุตุญูุฉ', 'ูุฌุงููุฉ'),
            
            ('ERIC', 'https://eric.ed.gov/', 'ููุชูุญุฉ',
             'ูุงุนุฏุฉ ุจูุงูุงุช ุชุนููููุฉ ุชุญุชูู ุนูู ููุงุฑุฏ ุจุญุซูุฉ ูู ูุฌุงู ุงูุชุนููู', 'ูุฌุงููุฉ'),
            
            ('DOAJ', 'https://doaj.org/', 'ููุชูุญุฉ',
             'ุฏููู ุงููุฌูุงุช ุงูุนูููุฉ ุงูููุชูุญุฉ ุงููุตูู', 'ูุฌุงููุฉ'),
            
            ('arXiv', 'https://arxiv.org/', 'ููุชูุญุฉ',
             'ุฃุฑุดูู ููููุงูุงุช ุงูุนูููุฉ ูุจู ุงููุดุฑ ูู ุงูููุฒูุงุก ูุงูุฑูุงุถูุงุช ูุนููู ุงูุญุงุณูุจ', 'ูุฌุงููุฉ'),
            
            ('BASE', 'https://www.base-search.net/', 'ููุชูุญุฉ',
             'ูุญุฑู ุจุญุซ ุฃูุงุฏููู ุถุฎู ูููุซุงุฆู ุงูุนูููุฉ ุงูููุชูุญุฉ', 'ูุฌุงููุฉ'),
            
            ('DOAB', 'https://www.doabooks.org/', 'ููุชูุญุฉ',
             'ุฏููู ุงููุชุจ ุงูุฃูุงุฏูููุฉ ุงูููุชูุญุฉ ุงููุตูู', 'ูุฌุงููุฉ'),
            
            ('JSTOR', 'https://www.jstor.org/', 'ูุบููุฉ',
             'ููุชุจุฉ ุฑูููุฉ ุชุญุชูู ุนูู ุขูุงู ุงููุฌูุงุช ุงูุฃูุงุฏูููุฉ ูุงููุชุจ', 'ูููุฒุฉ'),
            
            ('ProQuest', 'https://www.proquest.com/', 'ูุบููุฉ',
             'ููุตุฉ ุจุญุซูุฉ ุดุงููุฉ ุชุญุชูู ุนูู ุฃุทุฑูุญุงุช ููุฌูุงุช ุนูููุฉ', 'ูููุฒุฉ'),
            
            ('ScienceDirect', 'https://www.sciencedirect.com/', 'ูุบููุฉ',
             'ููุตุฉ ุฅูุณูููุฑ ููุจุญุซ ูู ุงููุฌูุงุช ุงูุนูููุฉ ูุงููุชุจ', 'ูููุฒุฉ'),
            
            ('RefSeek', 'https://www.refseek.com/', 'ุฅุถุงููุฉ',
             'ูุญุฑู ุจุญุซ ุฃูุงุฏููู ููููุงุฑุฏ ุงูุนูููุฉ', 'ูุฌุงููุฉ'),
            
            ('Google Scholar', 'https://scholar.google.com/', 'ุฅุถุงููุฉ',
             'ูุญุฑู ุจุญุซ ุฃูุงุฏููู ูู ุฌูุฌู', 'ูุฌุงููุฉ'),
            
            ('PMC', 'https://pmc.ncbi.nlm.nih.gov/', 'ุฅุถุงููุฉ',
             'ูุฑูุฒ PubMed ูููุฌูุงุช ุงูุนูููุฉ', 'ูุฌุงููุฉ'),
            
            ('Semantic Scholar', 'https://www.semanticscholar.org/', 'ุฅุถุงููุฉ',
             'ูุญุฑู ุจุญุซ ุฃูุงุฏููู ุฐูู ุจุงุณุชุฎุฏุงู ุงูุฐูุงุก ุงูุงุตุทูุงุนู', 'ูุฌุงููุฉ'),
            
            ('AOSIS', 'https://aosis.co.za/', 'ุฅุถุงููุฉ',
             'ูุงุดุฑ ูููุฌูุงุช ุงูุนูููุฉ ููุชูุญุฉ ุงููุตูู', 'ูุฌุงููุฉ'),
            
            ('SCIRP', 'https://www.scirp.org/', 'ุฅุถุงููุฉ',
             'ุฌูุนูุฉ ุงูุจุญูุซ ุงูุนูููุฉ ุงูุฏูููุฉ', 'ูุฌุงููุฉ'),
            
            ('Academic Journals', 'https://academicjournals.org/', 'ุฅุถุงููุฉ',
             'ูุฌูุงุช ุฃูุงุฏูููุฉ ููุชูุญุฉ ุงููุตูู', 'ูุฌุงููุฉ'),
            
            ('CORE', 'https://core.ac.uk/', 'ุฅุถุงููุฉ',
             'ูุญุฑู ุจุญุซ ููููุงุฑุฏ ุงูุนูููุฉ ููุชูุญุฉ ุงููุตูู', 'ูุฌุงููุฉ'),
            
            ('British Library', 'https://www.bl.uk/', 'ุฅุถุงููุฉ',
             'ุงูููุชุจุฉ ุงูุจุฑูุทุงููุฉ ุงูุฑูููุฉ', 'ูุฌุงููุฉ'),
            
            ('UCL Discovery', 'https://discovery.ucl.ac.uk/', 'ุฅุถุงููุฉ',
             'ูุณุชูุฏุน ุฌุงูุนุฉ ููููุฏุฌ ููุฏู', 'ูุฌุงููุฉ'),
            
            ('Internet Archive', 'https://archive.org/details/americana', 'ุฅุถุงููุฉ',
             'ุฃุฑุดูู ุงูุฅูุชุฑูุช ููููุงุฏ ุงูุฑูููุฉ', 'ูุฌุงููุฉ'),
            
            ('Library of Congress', 'https://archive.org/details/library_of_congress', 'ุฅุถุงููุฉ',
             'ููุชุจุฉ ุงููููุบุฑุณ ุงูุฃูุฑูููุฉ', 'ูุฌุงููุฉ'),
            
            ('Oxford JIS', 'https://academic.oup.com/jis?login=false', 'ุฅุถุงููุฉ',
             'ูุฌูุฉ ุฃูุณููุฑุฏ ููุฏุฑุงุณุงุช ุงูุฅุณูุงููุฉ', 'ูุฌุงููุฉ'),
            
            ('Ahkam Journal', 'https://journal.uinjkt.ac.id/index.php/ahkam/about', 'ุฅุถุงููุฉ',
             'ูุฌูุฉ ุงูุฃุญูุงู ููุฏุฑุงุณุงุช ุงูุฅุณูุงููุฉ', 'ูุฌุงููุฉ'),
            
            ('ASJP ุงูุฌุฒุงุฆุฑูุฉ', 'https://asjp.cerist.dz/', 'ุฅุถุงููุฉ',
             'ุงูููุตุฉ ุงูุฌุฒุงุฆุฑูุฉ ูููุฌูุงุช ุงูุนูููุฉ', 'ูุฌุงููุฉ'),
            
            ('AJOL ุฃูุฑูููุง', 'https://www.ajol.info/index.php/ajol', 'ุฅุถุงููุฉ',
             'ุงููุฌูุงุช ุงูุนูููุฉ ุงูุฃูุฑูููุฉ ุนุจุฑ ุงูุฅูุชุฑูุช', 'ูุฌุงููุฉ'),
        ]
        
        # 4. ุฅุฏุฎุงู ุงูุจูุงูุงุช ุฅุฐุง ูุงูุช ุงูุฌุฏุงูู ูุงุฑุบุฉ
        cursor.execute('SELECT COUNT(*) as count FROM resources')
        if cursor.fetchone()['count'] == 0:
            cursor.executemany('''
                INSERT INTO resources (name, type, university, wilaya, url, description, repository_link, repository_name, search_keywords)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
            ''', all_resources)
            print(f"โ ุชู ุฅุฏุฎุงู {len(all_resources)} ููุฑุฏ ุญูููู")
        
        cursor.execute('SELECT COUNT(*) as count FROM scientific_sources')
        if cursor.fetchone()['count'] == 0:
            cursor.executemany('''
                INSERT INTO scientific_sources (name, url, type, description, access_type)
                VALUES (%s, %s, %s, %s, %s)
            ''', all_sources)
            print(f"โ ุชู ุฅุฏุฎุงู {len(all_sources)} ูุตุฏุฑ ุนููู ุญูููู")
        
        conn.commit()
        print("๐ ุชู ุชุญููู ุฌููุน ุงูุจูุงูุงุช ุงูุญููููุฉ ุจูุฌุงุญ!")
        
    except Exception as e:
        print(f"โ ุฎุทุฃ ูู ุชุญููู ุงูุจูุงูุงุช: {e}")
    finally:
        if cursor:
            cursor.close()
        if conn:
            conn.close()

# โฌ๏ธ โฌ๏ธ โฌ๏ธ ุฅูู ููุง โฌ๏ธ โฌ๏ธ โฌ๏ธ
# ุฅุนุฏุงุฏุงุช ูุงุนุฏุฉ ุงูุจูุงูุงุช
DB_CONFIG = {
    'host': 'localhost',
    'user': 'root',
    'password': 'nelly2002',
    'database': 'findemy_v2',
    'charset': 'utf8mb4'
}

def get_db_connection():
    """ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช"""
    try:
        conn = pymysql.connect(
            host=DB_CONFIG['host'],
            user=DB_CONFIG['user'],
            password=DB_CONFIG['password'],
            database=DB_CONFIG['database'],
            charset=DB_CONFIG['charset'],
            cursorclass=pymysql.cursors.DictCursor
        )
        return conn
    except Exception as err:
        print(f"โ ุฎุทุฃ ูู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช: {err}")
        return None

# =====================================================
# ุฏูููุฑุงุช ุงูุชุญูู
# =====================================================

def login_required(f):
    """ุชุฃูุฏ ูู ุชุณุฌูู ุงูุฏุฎูู"""
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user_id' not in session:
            flash('ูุฌุจ ุชุณุฌูู ุงูุฏุฎูู ุฃููุงู', 'warning')
            return redirect(url_for('login'))
        return f(*args, **kwargs)
    return decorated_function

def admin_required(f):
    """ุชุฃูุฏ ูู ุฃู ุงููุณุชุฎุฏู ุฃุฏูู"""
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user_id' not in session or session.get('user_role') != 'admin':
            flash('ุบูุฑ ูุตุฑุญ ุจุงููุตูู ููุฐู ุงูุตูุญุฉ', 'error')
            return redirect(url_for('home'))
        return f(*args, **kwargs)
    return decorated_function

# =====================================================
# ุงูุตูุญุงุช ุงูุนุงูุฉ
# =====================================================

@app.route('/')
def home():
    """ุงูุตูุญุฉ ุงูุฑุฆูุณูุฉ"""
    return render_template('one.html', user_logged_in='user_id' in session)

@app.route('/search')
def search():
    """ุตูุญุฉ ุงูุจุญุซ ุงููุชูุฏู"""
    return render_template('search.html', user_logged_in='user_id' in session)

@app.route('/books')
def books():
    """ุตูุญุฉ ุงููุชุจ ุงููุณุชุนููุฉ"""
    conn = get_db_connection()
    books_list = []
    
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT b.*, u.full_name as seller_name 
                FROM books b 
                JOIN users u ON b.seller_id = u.id 
                WHERE b.status = 'approved'
                ORDER BY b.created_at DESC
            ''')
            books_list = cursor.fetchall()
            cursor.close()
        except Exception as e:
            print(f"ุฎุทุฃ ูู ุฌูุจ ุงููุชุจ: {e}")
        finally:
            conn.close()
    
    return render_template('books.html', books=books_list, user_logged_in='user_id' in session)

@app.route('/about')
def about():
    """ุตูุญุฉ ุนู ุงูููุตุฉ"""
    return render_template('about.html', user_logged_in='user_id' in session)

# =====================================================
# ูุธุงู ุงููุณุชุฎุฏููู (ุงูุชุณุฌููุ ุงูุฏุฎููุ ุงูุฎุฑูุฌ)
# =====================================================

@app.route('/login', methods=['GET', 'POST'])
def login():
    """ุชุณุฌูู ุงูุฏุฎูู"""
    if 'user_id' in session:
        return redirect(url_for('home'))
    
    if request.method == 'POST':
        email = request.form.get('email')
        password = request.form.get('password')
        
        if not email or not password:
            flash('ูุฑุฌู ููุก ุฌููุน ุงูุญููู', 'error')
            return render_template('login.html')
        
        conn = get_db_connection()
        if not conn:
            flash('ุฎุทุฃ ูู ุงูุงุชุตุงู ุจุงูุฎุงุฏู', 'error')
            return render_template('login.html')
        
        try:
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM users WHERE email = %s', (email,))
            user = cursor.fetchone()
            
            if user:
                if user['password_hash'] == '':  # ุฅุฐุง ูุงูุช ูููุฉ ุงูุณุฑ ุบูุฑ ูุดูุฑุฉ
                    if password == 'nelly2002' and user['email'] == 'belloutinihel@gmail.com':
                        hashed_password = generate_password_hash('nelly2002')
                        cursor.execute(
                            'UPDATE users SET password_hash = %s, last_login = %s WHERE id = %s',
                            (hashed_password, datetime.now(), user['id'])
                        )
                        conn.commit()
                        
                        session['user_id'] = user['id']
                        session['user_name'] = user['full_name']
                        session['user_email'] = user['email']
                        session['user_role'] = user['role']
                        
                        flash(f'ูุฑุญุจุงู ุจุนูุฏุชู {user["full_name"]}!', 'success')
                        
                        if user['role'] == 'admin':
                            return redirect(url_for('admin_dashboard'))
                        else:
                            return redirect(url_for('home'))
                    else:
                        flash('ูููุฉ ุงููุฑูุฑ ุบูุฑ ุตุญูุญุฉ', 'error')
                else:
                    if check_password_hash(user['password_hash'], password):
                        cursor.execute(
                            'UPDATE users SET last_login = %s WHERE id = %s',
                            (datetime.now(), user['id'])
                        )
                        conn.commit()
                        
                        session['user_id'] = user['id']
                        session['user_name'] = user['full_name']
                        session['user_email'] = user['email']
                        session['user_role'] = user['role']
                        
                        flash(f'ูุฑุญุจุงู ุจุนูุฏุชู {user["full_name"]}!', 'success')
                        
                        if user['role'] == 'admin':
                            return redirect(url_for('admin_dashboard'))
                        else:
                            return redirect(url_for('home'))
                    else:
                        flash('ูููุฉ ุงููุฑูุฑ ุบูุฑ ุตุญูุญุฉ', 'error')
            else:
                flash('ุงูุจุฑูุฏ ุงูุฅููุชุฑููู ุบูุฑ ูุณุฌู', 'error')
                
        except Exception as e:
            flash('ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุชุณุฌูู ุงูุฏุฎูู', 'error')
            print(f"ุฎุทุฃ: {e}")
        finally:
            cursor.close()
            conn.close()
    
    return render_template('login.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    """ุฅูุดุงุก ุญุณุงุจ ุฌุฏูุฏ"""
    if 'user_id' in session:
        return redirect(url_for('home'))
    
    if request.method == 'POST':
        full_name = request.form.get('full_name')
        email = request.form.get('email')
        password = request.form.get('password')
        phone = request.form.get('phone')
        
        if not all([full_name, email, password]):
            flash('ูุฑุฌู ููุก ุฌููุน ุงูุญููู ุงููุทููุจุฉ', 'error')
            return render_template('register.html')
        
        if len(password) < 6:
            flash('ูููุฉ ุงููุฑูุฑ ูุฌุจ ุฃู ุชููู 6 ุฃุญุฑู ุนูู ุงูุฃูู', 'error')
            return render_template('register.html')
        
        hashed_password = generate_password_hash(password)
        
        conn = get_db_connection()
        if not conn:
            flash('ุฎุทุฃ ูู ุงูุงุชุตุงู ุจุงูุฎุงุฏู', 'error')
            return render_template('register.html')
        
        try:
            cursor = conn.cursor()
            
            cursor.execute('SELECT id FROM users WHERE email = %s', (email,))
            if cursor.fetchone():
                flash('ูุฐุง ุงูุจุฑูุฏ ุงูุฅููุชุฑููู ูุณุฌู ุจุงููุนู', 'error')
                return render_template('register.html')
            
            cursor.execute(
                'INSERT INTO users (full_name, email, password_hash, phone) VALUES (%s, %s, %s, %s)',
                (full_name, email, hashed_password, phone)
            )
            conn.commit()
            
            flash('ุชู ุฅูุดุงุก ุงูุญุณุงุจ ุจูุฌุงุญ! ููููู ุชุณุฌูู ุงูุฏุฎูู ุงูุขู.', 'success')
            return redirect(url_for('login'))
            
        except Exception as e:
            if 'Duplicate entry' in str(e):
                flash('ูุฐุง ุงูุจุฑูุฏ ุงูุฅููุชุฑููู ูุณุฌู ุจุงููุนู', 'error')
            else:
                flash('ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฅูุดุงุก ุงูุญุณุงุจ', 'error')
                print(f"ุฎุทุฃ: {e}")
        finally:
            cursor.close()
            conn.close()
    
    return render_template('register.html')

@app.route('/logout')
def logout():
    """ุชุณุฌูู ุงูุฎุฑูุฌ"""
    session.clear()
    flash('ุชู ุชุณุฌูู ุงูุฎุฑูุฌ ุจูุฌุงุญ', 'success')
    return redirect(url_for('home'))

# =====================================================
# ููุญุฉ ุชุญูู ุงูุฃุฏูู
# =====================================================

@app.route('/admin')
@admin_required
def admin_dashboard():
    """ููุญุฉ ุชุญูู ุงูุฃุฏูู"""
    conn = get_db_connection()
    stats = {}
    pending_books = []
    pending_orders = []
    
    if conn:
        try:
            cursor = conn.cursor()
            
            # ุงูุฅุญุตุงุฆูุงุช
            cursor.execute('SELECT COUNT(*) as count FROM users WHERE role = "user"')
            stats['total_users'] = cursor.fetchone()['count']
            
            cursor.execute('SELECT COUNT(*) as count FROM books')
            stats['total_books'] = cursor.fetchone()['count']
            
            cursor.execute('SELECT COUNT(*) as count FROM books WHERE status = "pending"')
            stats['pending_books'] = cursor.fetchone()['count']
            
            cursor.execute('SELECT COUNT(*) as count FROM orders WHERE status = "pending"')
            stats['pending_orders'] = cursor.fetchone()['count']
            
            # ุงููุชุจ ููุฏ ุงูุงูุชุธุงุฑ
            cursor.execute('''
                SELECT b.*, u.full_name as seller_name 
                FROM books b 
                JOIN users u ON b.seller_id = u.id 
                WHERE b.status = "pending"
                ORDER BY b.created_at DESC
            ''')
            pending_books = cursor.fetchall()
            
            # ุทูุจุงุช ุงูุดุฑุงุก ุงูุฌุฏูุฏุฉ
            cursor.execute('''
                SELECT o.*, b.title as book_title, 
                       o.buyer_name,
                       u.full_name as seller_name
                FROM orders o
                JOIN books b ON o.book_id = b.id
                JOIN users u ON b.seller_id = u.id
                WHERE o.status = "pending"
                ORDER BY o.created_at DESC
            ''')
            pending_orders = cursor.fetchall()
            
            cursor.close()
            
        except Exception as e:
            print(f"ุฎุทุฃ ูู ููุญุฉ ุงูุชุญูู: {e}")
            flash('ุญุฏุซ ุฎุทุฃ ูู ุชุญููู ุงูุจูุงูุงุช', 'error')
        finally:
            conn.close()
    
    return render_template('admin/dashboard.html', 
                         stats=stats, 
                         pending_books=pending_books, 
                         pending_orders=pending_orders)

# =====================================================
# API ูููุชุจ ุงููุณุชุนููุฉ
# =====================================================

@app.route('/api/books')
def get_books():
    """API ูุฌูุจ ุงููุชุจ ุงููุนุชูุฏุฉ ููุนุฑุถ"""
    conn = get_db_connection()
    if not conn:
        return jsonify({'error': 'ุฎุทุฃ ูู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช'}), 500
    
    try:
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT b.*, u.full_name as seller_name 
            FROM books b 
            JOIN users u ON b.seller_id = u.id 
            WHERE b.status = 'approved'
            ORDER BY b.created_at DESC
        ''')
        
        books = cursor.fetchall()
        cursor.close()
        conn.close()
        
        return jsonify(books)
        
    except Exception as e:
        print(f"ุฎุทุฃ ูู API ุงููุชุจ: {e}")
        return jsonify({'error': 'ุญุฏุซ ุฎุทุฃ ูู ุงูุฎุงุฏู'}), 500

# =====================================================
# API ููููุงุฑุฏ ูุงููุตุงุฏุฑ ุงูุนูููุฉ
# =====================================================

@app.route('/api/resources')
def get_resources():
    """API ูุฌูุจ ุงูููุงุฑุฏ - ุงูููุชุจุงุช ูุงููุณุชูุฏุนุงุช"""
    conn = get_db_connection()
    if not conn:
        return jsonify({'error': 'ุฎุทุฃ ูู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช'}), 500
    
    try:
        cursor = conn.cursor()
        cursor.execute('''
            SELECT * FROM resources 
            WHERE is_active = TRUE 
            ORDER BY name ASC
        ''')
        resources = cursor.fetchall()
        cursor.close()
        conn.close()
        
        print(f"โ ุชู ุฌูุจ {len(resources)} ููุฑุฏ ุนุจุฑ API")
        return jsonify(resources)
        
    except Exception as e:
        print(f"โ ุฎุทุฃ ูู API ุงูููุงุฑุฏ: {e}")
        return jsonify({'error': 'ุญุฏุซ ุฎุทุฃ ูู ุงูุฎุงุฏู'}), 500

@app.route('/api/resources/search')
def search_resources():
    """API ููุจุญุซ ูู ุงูููุงุฑุฏ"""
    query = request.args.get('q', '')
    conn = get_db_connection()
    
    if not conn:
        return jsonify({'error': 'ุฎุทุฃ ูู ุงูุงุชุตุงู'}), 500
    
    try:
        cursor = conn.cursor()
        
        if query:
            cursor.execute('''
                SELECT * FROM resources 
                WHERE is_active = TRUE 
                AND (name LIKE %s OR university LIKE %s OR wilaya LIKE %s OR search_keywords LIKE %s)
                ORDER BY name ASC
            ''', (f'%{query}%', f'%{query}%', f'%{query}%', f'%{query}%'))
        else:
            cursor.execute('''
                SELECT * FROM resources 
                WHERE is_active = TRUE 
                ORDER BY name ASC
            ''')
        
        resources = cursor.fetchall()
        cursor.close()
        conn.close()
        
        print(f"โ ุจุญุซ ุงูููุงุฑุฏ: '{query}' - ุชู ุงูุนุซูุฑ ุนูู {len(resources)} ูุชูุฌุฉ")
        return jsonify(resources)
        
    except Exception as e:
        print(f"โ ุฎุทุฃ ูู ุจุญุซ ุงูููุงุฑุฏ: {e}")
        return jsonify({'error': 'ุญุฏุซ ุฎุทุฃ ูู ุงูุจุญุซ'}), 500
    
@app.route('/api/scientific-sources')
def get_scientific_sources():
    """API ูุฌูุจ ุงููุตุงุฏุฑ ุงูุนูููุฉ"""
    conn = get_db_connection()
    if not conn:
        return jsonify({'error': 'ุฎุทุฃ ูู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช'}), 500
    
    try:
        cursor = conn.cursor()
        cursor.execute('''
            SELECT * FROM scientific_sources 
            WHERE is_active = TRUE 
            ORDER BY name ASC
        ''')
        sources = cursor.fetchall()
        cursor.close()
        conn.close()
        
        print(f"โ ุชู ุฌูุจ {len(sources)} ูุตุฏุฑ ุนููู ุนุจุฑ API")
        return jsonify(sources)
        
    except Exception as e:
        print(f"โ ุฎุทุฃ ูู API ุงููุตุงุฏุฑ ุงูุนูููุฉ: {e}")
        return jsonify({'error': 'ุญุฏุซ ุฎุทุฃ ูู ุงูุฎุงุฏู'}), 500

@app.route('/api/sources/search')
def search_sources():
    """API ููุจุญุซ ูู ุงููุตุงุฏุฑ ุงูุนูููุฉ"""
    query = request.args.get('q', '')
    conn = get_db_connection()
    
    if not conn:
        return jsonify({'error': 'ุฎุทุฃ ูู ุงูุงุชุตุงู'}), 500
    
    try:
        cursor = conn.cursor()
        
        if query:
            cursor.execute('''
                SELECT * FROM scientific_sources 
                WHERE is_active = TRUE 
                AND (name LIKE %s OR description LIKE %s)
                ORDER BY name ASC
            ''', (f'%{query}%', f'%{query}%'))
        else:
            cursor.execute('''
                SELECT * FROM scientific_sources 
                WHERE is_active = TRUE 
                ORDER BY name ASC
            ''')
        
        sources = cursor.fetchall()
        cursor.close()
        conn.close()
        
        print(f"โ ุจุญุซ ุงููุตุงุฏุฑ: '{query}' - ุชู ุงูุนุซูุฑ ุนูู {len(sources)} ูุชูุฌุฉ")
        return jsonify(sources)
        
    except Exception as e:
        print(f"โ ุฎุทุฃ ูู ุจุญุซ ุงููุตุงุฏุฑ: {e}")
        return jsonify({'error': 'ุญุฏุซ ุฎุทุฃ ูู ุงูุจุญุซ'}), 500
 
@app.route('/api/sources')
def get_sources():
    """API ูุฌูุจ ุงููุตุงุฏุฑ ุงูุนูููุฉ"""
    conn = get_db_connection()
    if not conn:
        return jsonify({'error': 'ุฎุทุฃ ูู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช'}), 500
    
    try:
        cursor = conn.cursor()
        cursor.execute('''
            SELECT * FROM scientific_sources 
            WHERE is_active = TRUE 
            ORDER BY name ASC
        ''')
        sources = cursor.fetchall()
        cursor.close()
        conn.close()
        
        print(f"โ ุชู ุฌูุจ {len(sources)} ูุตุฏุฑ ุนููู ุนุจุฑ API")
        return jsonify(sources)
        
    except Exception as e:
        print(f"โ ุฎุทุฃ ูู API ุงููุตุงุฏุฑ: {e}")
        return jsonify({'error': 'ุญุฏุซ ุฎุทุฃ ูู ุงูุฎุงุฏู'}), 500

# =====================================================
# ุทูุจุงุช ุงูุดุฑุงุก
# =====================================================
@app.route('/api/orders', methods=['POST'])
@login_required
def create_order():
    """ุฅูุดุงุก ุทูุจ ุดุฑุงุก - ุจุนูููุฉ 15%"""
    conn = get_db_connection()
    if not conn:
        return jsonify({'error': 'ุฎุทุฃ ูู ุงูุงุชุตุงู ุจุงูุฎุงุฏู'}), 500
    
    try:
        data = request.get_json()
        
        book_id = data.get('book_id')
        full_name = data.get('full_name')
        phone = data.get('phone')
        city = data.get('city')
        notes = data.get('notes', '')
        
        if not book_id or not full_name or not phone or not city:
            return jsonify({'error': 'ุฌููุน ุงูุญููู ูุทููุจุฉ'}), 400
        
        cursor = conn.cursor()
        
        cursor.execute('SELECT * FROM books WHERE id = %s', (book_id,))
        book = cursor.fetchone()
        
        if not book:
            return jsonify({'error': 'ุงููุชุงุจ ุบูุฑ ููุฌูุฏ'}), 404
        
        book_price = float(book['price']) if book['price'] else 0
        commission = book_price * 0.15
        total_price = book_price + commission
        
        cursor.execute('''
            INSERT INTO orders (
                book_id, seller_id, buyer_id, buyer_name, buyer_phone, 
                buyer_city, buyer_email, notes, total_price, commission, status
            ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, 'pending')
        ''', (
            book_id, 
            book['seller_id'],
            session['user_id'], 
            full_name, 
            phone, 
            city, 
            session.get('user_email', ''), 
            notes, 
            total_price, 
            commission
        ))
        
        conn.commit()
        order_id = cursor.lastrowid
        
        cursor.close()
        conn.close()
        
        print(f"โ ุชู ุฅูุดุงุก ุทูุจ ุดุฑุงุก ุฌุฏูุฏ: {order_id}")
        
        return jsonify({
            'success': True,
            'message': 'ุชู ุฅุฑุณุงู ุทูุจ ุงูุดุฑุงุก ุจูุฌุงุญ',
            'order_id': order_id
        })
        
    except Exception as e:
        print(f"โ ุฎุทุฃ: {e}")
        return jsonify({'error': 'ุญุฏุซ ุฎุทุฃ ูู ุงูุฎุงุฏู'}), 500

# =====================================================
# ุตูุญุงุช ุงููุชุจ
# =====================================================

@app.route('/books/sell')
@login_required
def sell_book():
    """ุตูุญุฉ ุจูุน ุงููุชุงุจ"""
    return render_template('sell-bk.html', user_logged_in=True)

@app.route('/books/buy/<int:book_id>')
@login_required
def buy_book(book_id):
    """ุตูุญุฉ ุดุฑุงุก ูุชุงุจ"""
    conn = get_db_connection()
    book = None
    
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT b.*, u.full_name as seller_name 
                FROM books b 
                JOIN users u ON b.seller_id = u.id 
                WHERE b.id = %s AND b.status = 'approved'
            ''', (book_id,))
            book = cursor.fetchone()
            cursor.close()
        except Exception as e:
            print(f"ุฎุทุฃ ูู ุฌูุจ ุจูุงูุงุช ุงููุชุงุจ: {e}")
        finally:
            conn.close()
    
    if not book:
        flash('ุงููุชุงุจ ุบูุฑ ูุชููุฑ', 'error')
        return redirect(url_for('books'))
    
    return render_template('buy-bk.html', book=book, user_logged_in=True)

@app.route('/resources')
def resources():
    """ุตูุญุฉ ุงูููุงุฑุฏ - ุงูููุชุจุงุช ูุงููุณุชูุฏุนุงุช"""
    conn = get_db_connection()
    resources_list = []
    
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT * FROM resources 
                WHERE is_active = TRUE 
                ORDER BY name ASC
            ''')
            resources_list = cursor.fetchall()
            cursor.close()
            print(f"โ ุชู ุฌูุจ {len(resources_list)} ููุฑุฏ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช")
        except Exception as e:
            print(f"โ ุฎุทุฃ ูู ุฌูุจ ุงูููุงุฑุฏ: {e}")
            flash('ุญุฏุซ ุฎุทุฃ ูู ุชุญููู ุงูููุงุฑุฏ', 'error')
        finally:
            conn.close()
    
    return render_template('resources.html', 
                         resources=resources_list, 
                         user_logged_in='user_id' in session)

@app.route('/sources')
def sources():
    """ุตูุญุฉ ุงููุตุงุฏุฑ ุงูุนูููุฉ"""
    conn = get_db_connection()
    sources_list = []
    
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT * FROM scientific_sources 
                WHERE is_active = TRUE 
                ORDER BY name ASC
            ''')
            sources_list = cursor.fetchall()
            cursor.close()
            print(f"โ ุชู ุฌูุจ {len(sources_list)} ูุตุฏุฑ ุนููู ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช")
        except Exception as e:
            print(f"โ ุฎุทุฃ ูู ุฌูุจ ุงููุตุงุฏุฑ ุงูุนูููุฉ: {e}")
            flash('ุญุฏุซ ุฎุทุฃ ูู ุชุญููู ุงููุตุงุฏุฑ ุงูุนูููุฉ', 'error')
        finally:
            conn.close()
    
    return render_template('sources.html', 
                         sources=sources_list, 
                         user_logged_in='user_id' in session)

# =====================================================
# ุชุดุบูู ุงูุชุทุจูู
# =====================================================

if __name__ == '__main__':
    # ุฃุถู ูุฐุง ุงูุณุทุฑ
    init_real_data()
    
    print("๐ ุจุฏุก ุชุดุบูู Findemy.dz ุงูุฅุตุฏุงุฑ ุงูุฌุฏูุฏ...")
    app.run(debug=True, host='0.0.0.0', port=5001)
